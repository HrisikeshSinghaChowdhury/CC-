#include<stdio.h>
#include<conio.h>

typedef struct polynode
{
	int coeff;
	int power;
	struct polynode * link;
} node ;
node * create(node * list);
void display(node * list);
node * getnode ();
node * polyadd(node * P, node * Q);
node *append(int power,float coeff,node* temp);

void main()
{
   
   node * P = NULL, * Q = NULL, *R = NULL;
   char resp;
   clrscr();
   printf("\n\t\tCREATION OF FIRST POLYNOMIAL : ");
   P = create(P);
   printf("\n\nHERE IS YOUR POLYNOMIAL-1 :");
   display(P);

   printf("\n\n\t\tCREATION OF SECOND POLYNOMIAL :");
   Q = create(Q);
   printf("\n\nHERE IS YOUR POLYNOMIAL-2 : ");
   display(Q);
   
   printf("\n\nThe resultant polynimial after addition is : ");
   R = polyadd(P,Q);
   display(R);

   getch();
}
	

node * create(node* head)
{
      node* newnode = NULL ,*ptr = head, *last;
      int flag = 1; char resp;
      printf("\nEnter the polynomial in descending order of exponent");
      do
      {      
	newnode = getnode();
	printf("\nEnter coeffitient : ");
      	scanf("%d",&(newnode -> coeff));
      	printf("\nEnter exponent : ");
      	scanf("%d",&(newnode -> power));
	if(flag == 1)
	{
	  ptr = newnode;
	  last = ptr;
	  flag = 0;
	}
	else
	{
	  last -> link = newnode;
	  last = newnode;
	}
	printf("\nWant to add another term ? (y/Y)");
	resp = getche();
      } while (resp == 'y'|| resp == 'Y');
	return(ptr);
      
}


node * getnode ()
{
    node * New;
	 New = (node*) malloc(sizeof (node)) ;
    New -> link = NULL;
    return New;
}

void display(node * head)
{
	node *temp;
        temp = head;
	if(temp == NULL)
	   printf("\npolynomial empty");
	while(temp -> link != NULL)
	{
	  printf("%0.1dx^%d + ",temp->coeff,temp->power);
	  temp = temp -> link;
	}
	printf("%0.1dx^%d",temp->coeff,temp->power);
}

node * polyadd( node *first,node *second)
{
   node *p1,*p2,*temp,*dummy;
   char ch;
   float coeff;
   p1 = first;
   p2 = second;
   temp = (node*) malloc (sizeof(node));
   if(temp == NULL)
      printf("\nmemory cannot be allocated");
   dummy = temp;
   while(p1 != NULL && p2 != NULL)
   {
     if( p1-> power == p2 -> power)
     {
        coeff = p1 -> coeff + p2 -> coeff ;
        temp = append(p1 -> power,coeff,temp);
        p1 = p1 -> link;
        p2 = p2 -> link;
     }
     else if( p1 -> power < p2 -> power)
     {
        coeff = p2 -> coeff;
        temp = append(p2 -> power,coeff,temp);
	p2 = p2 -> link;
     }
     else if(p1 -> power > p2 -> power)
     {
        coeff = p1 -> coeff;
        temp = append(p1 -> power,coeff,temp);
        p1 = p1 -> link;
     }
   }
  
   while( p1 != NULL)
   {
     temp = append(p1 -> power,p1 -> coeff,temp);
     p1 = p1 -> link;
   }

   while(p2 != NULL)
   {
     temp = append(p2 -> power,p2 -> coeff,temp);
     p2 = p2 -> link;
   }
   temp -> link = NULL;
   temp = dummy -> link;
   free(dummy);
   return(temp);
}

node *append(int power,float Coeff, node *temp)
{
  node *New, *dum;
  New = (node*) malloc(sizeof(node));
  if(New == NULL)
  printf("\ncannot be allocated");
  New -> power = power;
  New -> coeff = Coeff;
  New -> link = NULL;
  dum = temp;
  dum -> link = New;
  dum = New;
  return(dum);
} 

